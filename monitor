#!/usr/bin/env python

# Task 1:
# Create a simple, separate python app which would monitor the your system/server.
# Output should be written to the plain text file or  json file
# (needs to be specified in configuration file). For monitoring purposes use ​psutil​ module,
# see: https://pypi.org/project/psutil/
# It should create snapshots of the state of the system each 5 minutes
# (interval should be configurable): 1. Overall system data
# ● Overall CPU load
# ● Overall memory usage
# ● Overall virtual memory usage
# ● IO information
# ● Network information
# Example of the structure for output data is about as follows:
# SNAPSHOT 1: TIMESTAMP : <columns for system wide data>
# SNAPSHOT 2: TIMESTAMP : <columns for system wide data>
# SNAPSHOT 3: TIMESTAMP : <columns for # # system wide data>
# Config example
# [common]
# output = json
# interval = 5
# You can use any type of configs: ini files, yaml, json or even python settings.py
# You should create at least one class.
# Libraries:
# apgparse (optional) - for script arguments parsing:
# https://docs.python.org/3/library/argparse.html
# configparser - for config file parsing: https://docs.python.org/3.4/library/configparser.html

import psutil
import json
import time
import datetime
import configparser


class Monitor():

    file = ""

    def __init__(self, filename):
        self.file = filename

    def GetStats(self):
        s = {}
        s["timestamp"] = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        s["cpu"] = round(psutil.cpu_percent(1))  # Used CPU
        s["memory"] = round(psutil.virtual_memory().percent)  # Used memory
        return s

    def displayStats(self):
        a = self.GetStats()
        print("%s:  CPU:%d  MEM:%d" % (a["timestamp"], a["cpu"], a["memory"]))

    def writeStats(self):
        a = self.GetStats()
        f = open(self.file, "a+")
        f.write("%s:  CPU:%d  MEM:%d \n" % (a["timestamp"], a["cpu"], a["memory"]))
        f.close()


class jsonMonitor(Monitor):
    """ class jsonMonitor """
    def writeStats(self):
        a = self.GetStats()
        f = open(self.file, "a+")
        f.write(json.dumps(a))
        f.write("\n")
        f.close()


config = configparser.ConfigParser()
config.read('settings.ini')


try:
    output = config['common']['output']
except Exception:
    print("output type not fount in config, using default <json>")
    output = ""
finally:
    if output not in {"plain", "json"}:
        output = "json"

try:
    interval = int(config['common']['interval'])
except Exception:
    print("interval not fount in config, using default <5 minutes>")
    interval = 0
finally:
    if interval <= 0:
        interval = 5


try:
    outfile = config['common']['outfile']
except Exception:
    print("output file not fount in config, using default <monitor.log>")
    outfile = ""
finally:
    if outfile == "":
        outfile = "monitor.log"

if output == "json":
    myMonitor = jsonMonitor(outfile)
else:
    myMonitor = Monitor(outfile)

while True:
    myMonitor.displayStats()
    myMonitor.writeStats()
    time.sleep(interval * 60)
    print()
